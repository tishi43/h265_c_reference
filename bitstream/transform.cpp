// bitstream.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include <stdio.h>
#include <assert.h>
#include <memory.h>
#include <math.h>
#include <malloc.h>

#include "bitstream_header.h"

extern struct HEVCFrame *CurrPic;
extern int MinCbLog2SizeY;
extern int **TransIntermediate;

int transMatrix[32][32] = {
	{ 64,  64,  64,  64,  64,  64,  64,  64,  64,  64,  64,  64,  64,  64,  64,  64,
	  64,  64,  64,  64,  64,  64,  64,  64,  64,  64,  64,  64,  64,  64,  64,  64 },
	{ 90,  90,  88,  85,  82,  78,  73,  67,  61,  54,  46,  38,  31,  22,  13,   4,
	  -4, -13, -22, -31, -38, -46, -54, -61, -67, -73, -78, -82, -85, -88, -90, -90 },
	{ 90,  87,  80,  70,  57,  43,  25,   9,  -9, -25, -43, -57, -70, -80, -87, -90,
	  -90, -87, -80, -70, -57, -43, -25,  -9,   9,  25,  43,  57,  70,  80,  87,  90 },
	{ 90,  82,  67,  46,  22,  -4, -31, -54, -73, -85, -90, -88, -78, -61, -38, -13,
	  13,  38,  61,  78,  88,  90,  85,  73,  54,  31,   4, -22, -46, -67, -82, -90 },
	{ 89,  75,  50,  18, -18, -50, -75, -89, -89, -75, -50, -18,  18,  50,  75,  89,
	  89,  75,  50,  18, -18, -50, -75, -89, -89, -75, -50, -18,  18,  50,  75,  89 },
	{ 88,  67,  31, -13, -54, -82, -90, -78, -46, -4,   38,  73,  90,  85,  61,  22,
	  -22, -61, -85, -90, -73, -38,   4,  46,  78,  90,  82,  54,  13, -31, -67, -88 },
	{ 87,  57,   9, -43, -80, -90, -70, -25,  25,  70,  90,  80,  43,  -9, -57, -87,
	  -87, -57,  -9,  43,  80,  90,  70,  25, -25, -70, -90, -80, -43,   9,  57,  87 },
	{ 85,  46, -13, -67, -90, -73, -22,  38,  82,  88,  54,  -4, -61, -90, -78, -31,
	  31,  78,  90,  61,   4, -54, -88, -82, -38,  22,  73,  90,  67,  13, -46, -85 },
	{ 83,  36, -36, -83, -83, -36,  36,  83,  83,  36, -36, -83, -83, -36,  36,  83,
	  83,  36, -36, -83, -83, -36,  36,  83,  83,  36, -36, -83, -83, -36,  36,  83 },
	{ 82,  22, -54, -90, -61,  13,  78,  85,  31, -46, -90, -67,   4,  73,  88,  38,
	  -38, -88, -73,  -4,  67,  90,  46, -31, -85, -78, -13,  61,  90,  54, -22, -82 },
	{ 80,   9, -70, -87, -25,  57,  90,  43, -43, -90, -57,  25,  87,  70,  -9, -80,
	  -80,  -9,  70,  87,  25, -57, -90, -43,  43,  90,  57, -25, -87, -70,   9,  80 },
	{ 78,  -4, -82, -73,  13,  85,  67, -22, -88, -61,  31,  90,  54, -38, -90, -46,
	  46,  90,  38, -54, -90, -31,  61,  88,  22, -67, -85, -13,  73,  82,   4, -78 },
	{ 75, -18, -89, -50,  50,  89,  18, -75, -75,  18,  89,  50, -50, -89, -18,  75,
	  75, -18, -89, -50,  50,  89,  18, -75, -75,  18,  89,  50, -50, -89, -18,  75 },
	{ 73, -31, -90, -22,  78,  67, -38, -90, -13,  82,  61, -46, -88,  -4,  85,  54,
	  -54, -85,   4,  88,  46, -61, -82,  13,  90,  38, -67, -78,  22,  90,  31, -73 },
	{ 70, -43, -87,   9,  90,  25, -80, -57,  57,  80, -25, -90,  -9,  87,  43, -70,
	  -70,  43,  87,  -9, -90, -25,  80,  57, -57, -80,  25,  90,   9, -87, -43,  70 },
	{ 67, -54, -78,  38,  85, -22, -90,   4,  90,  13, -88, -31,  82,  46, -73, -61,
	  61,  73, -46, -82,  31,  88, -13, -90,  -4,  90,  22, -85, -38,  78,  54, -67 },
	{ 64, -64, -64,  64,  64, -64, -64,  64,  64, -64, -64,  64,  64, -64, -64,  64,
	  64, -64, -64,  64,  64, -64, -64,  64,  64, -64, -64,  64,  64, -64, -64,  64 },
	{ 61, -73, -46,  82,  31, -88, -13,  90,  -4, -90,  22,  85, -38, -78,  54,  67,
	  -67, -54,  78,  38, -85, -22,  90,   4, -90,  13,  88, -31, -82,  46,  73, -61 },
	{ 57, -80, -25,  90,  -9, -87,  43,  70, -70, -43,  87,   9, -90,  25,  80, -57,
	  -57,  80,  25, -90,   9,  87, -43, -70,  70,  43, -87,  -9,  90, -25, -80,  57 },
	{ 54, -85,  -4,  88, -46, -61,  82,  13, -90,  38,  67, -78, -22,  90, -31, -73,
	  73,  31, -90,  22,  78, -67, -38,  90, -13, -82,  61,  46, -88,   4,  85, -54 },
	{ 50, -89,  18,  75, -75, -18,  89, -50, -50,  89, -18, -75,  75,  18, -89,  50,
	  50, -89,  18,  75, -75, -18,  89, -50, -50,  89, -18, -75,  75,  18, -89,  50 },
	{ 46, -90,  38,  54, -90,  31,  61, -88,  22,  67, -85,  13,  73, -82,   4,  78,
	  -78,  -4,  82, -73, -13,  85, -67, -22,  88, -61, -31,  90, -54, -38,  90, -46 },
	{ 43, -90,  57,  25, -87,  70,   9, -80,  80,  -9, -70,  87, -25, -57,  90, -43,
	  -43,  90, -57, -25,  87, -70,  -9,  80, -80,   9,  70, -87,  25,  57, -90,  43 },
	{ 38, -88,  73,  -4, -67,  90, -46, -31,  85, -78,  13,  61, -90,  54,  22, -82,
	  82, -22, -54,  90, -61, -13,  78, -85,  31,  46, -90,  67,   4, -73,  88, -38 },
	{ 36, -83,  83, -36, -36,  83, -83,  36,  36, -83,  83, -36, -36,  83, -83,  36,
	  36, -83,  83, -36, -36,  83, -83,  36,  36, -83,  83, -36, -36,  83, -83,  36 },
	{ 31, -78,  90, -61,   4,  54, -88,  82, -38, -22,  73, -90,  67, -13, -46,  85,
	  -85,  46,  13, -67,  90, -73,  22,  38, -82,  88, -54,  -4,  61, -90,  78, -31 },
	{ 25, -70,  90, -80,  43,   9, -57,  87, -87,  57,  -9, -43,  80, -90,  70, -25,
	  -25,  70, -90,  80, -43,  -9,  57, -87,  87, -57,   9,  43, -80,  90, -70,  25 },
	{ 22, -61,  85, -90,  73, -38,  -4,  46, -78,  90, -82,  54, -13, -31,  67, -88,
	  88, -67,  31,  13, -54,  82, -90,  78, -46,   4,  38, -73,  90, -85,  61, -22 },
	{ 18, -50,  75, -89,  89, -75,  50, -18, -18,  50, -75,  89, -89,  75, -50,  18,
	  18, -50,  75, -89,  89, -75,  50, -18, -18,  50, -75,  89, -89,  75, -50,  18 },
	{ 13, -38,  61, -78,  88, -90,  85, -73,  54, -31,   4,  22, -46,  67, -82,  90,
	  -90,  82, -67,  46, -22,  -4,  31, -54,  73, -85,  90, -88,  78, -61,  38, -13 },
	{  9, -25,  43, -57,  70, -80,  87, -90,  90, -87,  80, -70,  57, -43,  25, -9,
	  -9,  25, -43,  57, -70,  80, -87,  90, -90,  87, -80,  70, -57,  43, -25,   9 },
	{  4, -13,  22, -31,  38, -46,  54, -61,  67, -73,  78, -82,  85, -88,  90, -90,
	  90, -90,  88, -85,  82, -78,  73, -67,  61, -54,  46, -38,  31, -22,  13,  -4 },
};

int transMatrix1[4][4] = {
	{29,  55,  74,  84,},
	{74,  74,   0, -74,},
	{84, -29, -74,  55,},
	{55, -84,  74, -29,},
};

void idct_4x4_type1(int **d, int **r)
{
	int i, j, k, x, y;
	int **e = TransIntermediate;
	int **g = e;

	for (k = 0; k < 4; k++) { // src第k列
		for (i = 0; i < 4; i++) { //matrix第i列
			e[i][k] = 0;
			for (j = 0; j < 4; j++) //matrix i列4行(j=0,1,2,3)和src k列4行(j=0,1,2,3)
				e[i][k] += d[j][k] * transMatrix1[j][i];
		}
	}
	for (y = 0; y < 4; y++)
		for (x = 0; x < 4; x++)
			g[y][x] = Clip3(-32768, 32767, (e[y][x] + 64) >> 7);

	for (k = 0; k < 4; k++) {
		for (i = 0; i < 4; i++) {
			r[k][i] = 0;
			for (j = 0; j < 4; j++)
				r[k][i] += g[k][j] * transMatrix1[j][i];
		}
	}
}

void idct_type0(int **d, int **r, int nTbS)
{
	int i, j, k, x, y;
	int **e = TransIntermediate;
	int **g = e;
	int stride = 8;
	if (nTbS == 4) //2 ^(5 - log2(nTbS))
		stride = 8;
	else if (nTbS == 8)
		stride = 4;
	else if (nTbS == 16)
		stride = 2;
	else if (nTbS == 32)
		stride = 1;

	for (k = 0; k < nTbS; k++) { // src每列
		for (i = 0; i < nTbS; i++) { //matrix每列
			e[i][k] = 0;
			for (j = 0; j < nTbS; j++)
				e[i][k] += d[j][k] * transMatrix[j*stride][i];
		}
	}
	for (y = 0; y < nTbS; y++)
		for (x = 0; x < nTbS; x++)
			g[y][x] = Clip3(-32768, 32767, (e[y][x] + 64) >> 7);
	memset(r[0], 0, nTbS * nTbS * sizeof(int));
	for (k = 0; k < nTbS; k++) {
		for (i = 0; i < nTbS; i++) {
			r[k][i] = 0;
			for (j = 0; j < nTbS; j++)
				r[k][i] += g[k][j] * transMatrix[j*stride][i];
		}
	}
}

//8.6.4 Transformation process for scaled transform coefficients
//x0,y0是亮度TU在图像坐标
void transform(int **d, int **r, int nTbS, int cIdx, int x0, int y0)
{
	int x, y;
	int trType;
	int bdShift = 12; //bdShift = (cIdx == 0) ? 20 − BitDepthY : 20 − BitDepthC
	if (CurrPic->cu_predmode[y0>>MinCbLog2SizeY][x0>>MinCbLog2SizeY] == MODE_INTRA &&
		nTbS == 4 &&
		cIdx == 0)
		trType = 1;
	else
		trType = 0;
	if (trType == 1)
		idct_4x4_type1(d, r);
	else
		idct_type0(d, r, nTbS);
	for (y = 0; y < nTbS; y++) {
		for (x = 0; x < nTbS; x++) {
			r[y][x] = (r[y][x] + (1 << (bdShift - 1))) >> bdShift; //8-16
			if (r[y][x])
				Log_data("transform [%d] %d\n", y*nTbS+x, r[y][x]);
		}
	}
}

